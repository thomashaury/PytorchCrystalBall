#import pytorch libraries
import torch
from torch import nn

#import visualization library
import matplotlib.pyplot as plt

#verify PyTorch Version
torch.__version__

"""STEP 2: PROCESSING CAPAILITY CHECK"""

#Check to see if we have a GPU for training
device = 'cuda' if torch.cuda.is_available() else 'cpu'
print('A {} device was detected.'.format(device))

#print the name of the cuda device if detected
if device == 'cuda':
  print(torch.cuda.get_device_name(device=device))

"""STEP 3: DOWNLOAD AND PREPARE THE DATASET:"""

# Use pandas to do ur data processing
# Download the data set
#import pandas as pd
#url = 'https://drive.google.com/file/d/1fN1J2-b1wxVyJqEu3holdTw3VlKaFqDW/view?usp=share_link'
#df = pd.read_csv(url, error_bad_lines=False)

# print dataframe
#df


import pandas as pd
import requests
import numpy as np
from io import StringIO

google_drive_link = 'https://drive.google.com/file/d/1vy-txqE4aH1WiASR5Cb4B8fcIm51BuTg/view?usp=sharing'
#google_drive_link = 'https://drive.google.com/file/d/1Jn3_Iwo9AxCmkaZJulDfgsBy91ZvOyq-/view?usp=share_link'
#google_drive_link = 'https://drive.google.com/file/d/1tKC3Y-jBiJ13o3n-1GlNajTULMsCMV84/view?usp=share_link'
#google_drive_link = 'https://drive.google.com/file/d/1qgovo-VcxHoC25u9dgTg2oFFuWoM3M4I/view?usp=share_link'
#google_drive_link = 'https://drive.google.com/file/d/1fN1J2-b1wxVyJqEu3holdTw3VlKaFqDW/view?usp=share_link'

# Modify the link to create a direct download link
file_id = google_drive_link.split('/')[-2]
direct_download_link = f'https://drive.google.com/uc?export=download&id={file_id}'

# Download the file content using the requests library
response = requests.get(direct_download_link)

# Check if the request was successful
if response.status_code == 200:
    # Load the CSV data into a pandas DataFrame
    data = StringIO(response.text)
    df = pd.read_csv(data, low_memory=False)
#
#df.head(10)
print (df.dtypes)

"""Here we add Input and output parameters"""

# Create our pytorch tensors and move to cpu or gpu if available
# Extract the inputs and create a pytorch tensor x(inputs)
inputs = ['Title','Metro / Micro','Adult Gender','High Tech Household','Internet User','Registered Voter','Actual Age','Marital Status','Children Present','Number Of Children','Grandparents','Ethnicity','Language','Mortgage Loan Type','Number Of Bedrooms','Pool Present','Second Property Indicator']
x = torch.tensor(df[inputs].values, dtype=torch.float, device=device)

outputs = ['RESP']
y = torch.tensor(df[outputs].values, dtype=torch.float, device=device)

y[5:50]

"""Below WE BUILD THE NUERAL NETWORK"""

# Define your pytorch nueral network
# Number of inputs 40
# number of hidden units : 100
# number of hidden layers: 1
# Activation function: Relu
# number of outputs 2

model = nn.Sequential(
            nn.Linear(17,85),
            nn.ReLU(),
            nn.Linear(85,1)
)

model.to(device)

"""BELOW WE TRAIN THE NUERAL NETWORK"""

import torch.optim as optim

# measure our nueral network ny mean square
criterion = torch.nn.MSELoss()

# Train our network with a simple SGD approach
optimizer = optim.SGD(model.parameters(), lr=0.001, momentum=0.9)

# Train our network using the entire dataset 5 times
for epoch in range(3):
    totalLoss = 0
    for i in range(len(x)):

        # single forward pass
        ypred = model(x[i])

        # Measure how well
        loss = criterion(ypred, y[i])

        # Track how well the model predicted
        totalLoss+=loss.item()

        # Update the nueral network
        optimizer.zero_grad()
        loss.backward()
        optimizer.step()

    # Print out our loss after each training iteration
    print ("Total Loss: ", totalLoss)

"""BELOW WE ANALYZE RESULTS"""

import csv




# Plot predictions vs True values
@torch.no_grad()
def graphPredictions(model, x, y, minValue, maxValue):

    model.eval() # set the model to inference mode

    predictions=[] # track predictions
    actual=[] # track actual results

    x.to(device)
    y.to(device)
    model.to(device)

    for i in range(len(x)):

        # single forward pass
        pred = model(x[i])
        act = y[i]

        predictions.append(pred.tolist())
        actual.append(act.item())

    # plot actuals bs predictions
    plt.scatter(actual, predictions)
    plt.xlabel('Actual Responses')
    plt.ylabel('Predicted Responses')
    plt.plot([minValue, maxValue], [minValue, maxValue])
    plt.xlim(minValue, maxValue)
    plt.ylim(minValue, maxValue)

    # make display equal in both directions
    plt.gca().set_aspect('equal', adjustable='box')
    plt.show()

def printPredictions(model, x, y):
  predictions=[] # track predictions
  actual=[] # track actual results
  for i in range(len(x)):

          # single forward pass
      pred = model(x[i])
      act = y[i]
      predictions.append(pred.tolist())
      actual.append(act.item())
   # model.eval() # set the model to inference mode
  with open('GuessResponse.csv', 'w') as f:
    print ('I tried')
    writer = csv.writer(f)
    writer.writerows(zip(predictions, actual))


   # x.to(device)
    #y.to(device)
    #model.to(device)

graphThis()
